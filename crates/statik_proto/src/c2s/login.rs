use statik_core::prelude::*;
use statik_derive::*;
use uuid::Uuid;

#[derive(Debug, Packet)]
#[packet(id = 0x00, state = State::Login)]
pub struct C2SLoginStart {
    ///The player's Username.
    pub username: String,
    ///The UUID of the player logging in. Only sent if the previous byte is
    /// true (denoted bythe Option enum).
    pub uuid: Option<Uuid>,
}

///See https://wiki.vg/Protocol_Encryption for more details.
#[derive(Debug, Packet)]
#[packet(id = 0x01, state = State::Login)]
pub struct C2SEncryptionResponse {
    /// The server's public key, as bytes.
    pub public_key: Vec<u8>,
    /// A sequence of random bytes generated by the server. Always of Length
    /// 4 when send by a notchian server.
    pub verify_token: Vec<u8>,
}

#[derive(Debug, Packet)]
#[packet(id = 0x02, state = State::Login)]
pub struct C2SLoginPluginResponse {
    /// Should match message ID from the server.
    pub message_id: VarInt,
    /// Any data, depending on the channel. The length of this array must be
    /// inferred from the packet length. Only sent if the previous byte is
    /// true (denoted bythe Option enum).
    pub data: Option<RawBytes>,
}
