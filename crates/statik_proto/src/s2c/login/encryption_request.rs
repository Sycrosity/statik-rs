// // use rand::{distributions::Uniform, Rng};
// use statik_derive::Packet;

// #[derive(Debug, Packet)]
// #[packet(id = 0x01)]
// pub struct S2CEncryptionRequest {
//     /// Appears to be unused and sent as empty to the client. 20 bytes long.
//     pub server_id: String,
//     /// The server's public key, as bytes
//     pub public_key: Vec<u8>,
//     /// A sequence of random bytes generated by the server. Always of Length
//     /// 4 when send by a notchian server.
//     pub verify_token: Vec<u8>,
// }

// // impl S2CEncryptionRequest {
// //     pub fn new(public_key: Vec<u8>) -> Self {

// //         let mut rng = rand::thread_rng();
// //         let range = Uniform::new(u8::MIN, u8::MAX);

// //         Self {
// //             server_id: String::new(),
// //             public_key,
// //             verify_token: (0..4).map(|_| rng.sample(&range)).collect(),
// //         }
// //     }
// // }
