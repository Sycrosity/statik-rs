use statik_core::prelude::*;
use statik_derive::*;

#[derive(Debug, Packet)]
#[packet(id = 0x00)]
pub struct S2CDisconnect {
    /// Why the client was disconnected before login success.
    pub reason: Chat,
}

#[derive(Debug, Packet)]
#[packet(id = 0x01, state = State::Login)]
pub struct S2CEncryptionRequest {
    /// Appears to be unused and sent as empty to the client. 20 bytes long.
    pub server_id: String,
    /// The server's public key, as bytes
    pub public_key: Vec<u8>,
    /// A sequence of random bytes generated by the server. Always of Length
    /// 4 when send by a notchian server.
    pub verify_token: Vec<u8>,
}

use uuid::Uuid;

#[derive(Debug, Packet)]
#[packet(id = 0x02, state = State::Login)]
pub struct S2CLoginSuccess {
    pub uuid: Uuid,
    pub username: String,
    // pub properties: Property,
}

#[derive(Debug, Packet)]
#[packet(id = 0x03, state = State::Login)]
pub struct S2CSetCompression {
    pub threshold: VarInt,
}

#[derive(Debug, Packet)]
#[packet(id = 0x04, state = State::Login)]
pub struct S2CLoginPluginRequest {
    pub message_id: VarInt,
    /// See: https://wiki.vg/Protocol#Identifier
    pub channel: String,
    pub data: Vec<u8>,
}
